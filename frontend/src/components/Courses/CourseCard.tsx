import { useState } from 'react';
import Link from 'next/link';
import type { Course } from '../../types';
import { CourseService } from '../../services/courseService';

interface CourseCardProps {
  course: Course;
  onUpdate: () => void;
}

export default function CourseCard({ course, onUpdate }: CourseCardProps) {
  const [isActivating, setIsActivating] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);

  const handleActivate = async () => {
    setIsActivating(true);
    try {
      await CourseService.toggleCourseActive(course.id);
      onUpdate();
    } catch (error) {
      console.error('Error toggling course:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—Å–∞');
    } finally {
      setIsActivating(false);
    }
  };

  const handleGenerateQuests = async () => {
    setIsGenerating(true);
    try {
      await CourseService.generateQuestsForCourse(course.id);
      alert('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ö–≤–µ—Å—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò.');
    } catch (error) {
      console.error('Error generating quests:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤');
    } finally {
      setIsGenerating(false);
    }
  };

  const getCategoryIcon = (category: Course['category']) => {
    const icons = {
      STUDY: 'üéì',
      FITNESS: 'üí™',
      CREATIVE: 'üé®',
      PERSONAL: 'üåü',
      OTHER: 'üîß'
    };
    return icons[category];
  };

  const getDifficultyColor = (difficulty: Course['difficulty']) => {
    const colors = {
      EASY: 'text-green-400',
      MEDIUM: 'text-yellow-400',
      HARD: 'text-red-400'
    };
    return colors[difficulty];
  };

  const getProgressColor = (progress: number) => {
    if (progress < 30) return 'bg-red-500';
    if (progress < 70) return 'bg-yellow-500';
    return 'bg-green-500';
  };

  return (
    <div className="cyber-bg cyber-border rounded-lg p-6 hover:shadow-lg hover:shadow-cyan-500/10 transition-all">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
      <div className="flex justify-between items-start mb-4">
        <div className="flex items-center gap-3">
          <span className="text-2xl">{getCategoryIcon(course.category)}</span>
          <h3 className="text-xl font-orbitron text-cyber-cyan">{course.title}</h3>
        </div>
        <span className={`text-sm font-bold ${getDifficultyColor(course.difficulty)}`}>
          {course.difficulty}
        </span>
      </div>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
      <p className="text-cyan-200 text-sm mb-4 line-clamp-2">
        {course.description}
      </p>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      <div className="mb-4">
        <div className="flex justify-between text-sm text-cyan-300 mb-2">
          <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
          <span>{course.progress}%</span>
        </div>
        <div className="w-full bg-gray-700 rounded-full h-2">
          <div 
            className={`h-2 rounded-full ${getProgressColor(course.progress)} transition-all duration-500`}
            style={{ width: `${course.progress}%` }}
          ></div>
        </div>
      </div>

      {/* –¶–µ–ª—å –∏ —É—Ä–æ–≤–Ω–∏ */}
      <div className="text-sm text-cyan-300 mb-4 space-y-1">
        <div className="flex justify-between">
          <span>–¶–µ–ª—å:</span>
          <span className="text-cyber-cyan font-bold text-right max-w-[60%] truncate" title={course.goal}>
            {course.goal}
          </span>
        </div>
        <div className="flex justify-between">
          <span>–£—Ä–æ–≤–µ–Ω—å:</span>
          <span>{course.currentLevel} ‚Üí {course.targetLevel}</span>
        </div>
        <div className="flex justify-between">
          <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
          <span>{course.duration} –¥–Ω–µ–π</span>
        </div>
      </div>

      {/* –¢–µ–≥–∏ */}
      <div className="flex flex-wrap gap-1 mb-4">
        {course.tags.slice(0, 3).map(tag => (
          <span 
            key={tag}
            className="bg-cyan-900 text-cyber-cyan px-2 py-1 rounded text-xs"
          >
            {tag}
          </span>
        ))}
        {course.tags.length > 3 && (
          <span className="bg-cyan-800 text-cyber-cyan px-2 py-1 rounded text-xs">
            +{course.tags.length - 3}
          </span>
        )}
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex gap-2">
        <button
          onClick={handleActivate}
          disabled={isActivating}
          className={`flex-1 py-2 rounded-lg font-orbitron text-sm transition-colors ${
            course.isActive 
              ? 'bg-red-600 hover:bg-red-500 text-white' 
              : 'bg-green-600 hover:bg-green-500 text-white'
          } ${isActivating ? 'opacity-50 cursor-not-allowed' : ''}`}
        >
          {isActivating ? '...' : course.isActive ? '–û–°–¢–ê–ù–û–í–ò–¢–¨' : '–ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨'}
        </button>

        <button
          onClick={handleGenerateQuests}
          disabled={isGenerating}
          className={`flex-1 bg-cyber-cyan text-black py-2 rounded-lg font-orbitron text-sm font-bold hover:bg-cyan-300 transition-colors ${
            isGenerating ? 'opacity-50 cursor-not-allowed' : ''
          }`}
        >
          {isGenerating ? '–ì–ï–ù–ï–†–ê–¶–ò–Ø...' : '–ö–í–ï–°–¢–´'}
        </button>

        <Link 
          href={`/courses/${course.id}`}
          className="flex-1 bg-purple-600 text-white py-2 rounded-lg font-orbitron text-sm text-center hover:bg-purple-500 transition-colors"
        >
          –†–ï–î–ê–ö–¢.
        </Link>
      </div>
    </div>
  );
}
